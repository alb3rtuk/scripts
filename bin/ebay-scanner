#!/usr/bin/env ruby

require 'nimzo-lib'
require 'mysql'
require 'yaml'
require 'nokogiri'
require 'webrick/httputils'
require 'open-uri'

@counter = 0
@connection = Mysql.new('127.0.0.1', 'root', '', 'app')

# Processes a single eBay Listing (page).
# @return void
def process_page(link)

    @counter += 1

    begin

        puts @counter

        page = Nokogiri::HTML(open(WEBrick::HTTPUtils.escape(link)))

        @user_id = page.css('span[class=mbg-nw]')[0].children.text
        @user_score = page.css('span[class=mbg-l] > a')[0].children.text
        @user_feedback = page.css('div[id=si-fb]').children.text.gsub('Positive Feedback', '').strip.gsub('%', '')
        @user_phone = page.css('div[class=bsi-c2] > div > span')[1].text.reverse.gsub(/[^0-9]/, '')
        @user_email = page.css('div[class=bsi-c2] > div > span')[-1].text.reverse
        @user_name = page.css('div[class=bsi-c1] > div')[0].text.reverse
        @user_address_one = page.css('div[class=bsi-c1] > div')[1].text.reverse
        @user_address_two = page.css('div[class=bsi-c1] > div')[2].text.reverse
        @user_address_three = page.css('div[class=bsi-c1] > div')[3].text.reverse
        @user_address_four = page.css('div[class=bsi-c1] > div')[4].text.reverse
        @user_address_five = page.css('div[class=bsi-c1] > div')[5].text.reverse
        @user_url = link

        results = 0
        result = @connection.query("SELECT COUNT(id) FROM crawler_ebay_users WHERE user_id = '#{@user_id}'")
        result.each_hash do |row|
            results = row['COUNT(id)']
        end

        @valid = true
        @valid = false if results.to_i > 0
        @valid = false unless @user_id.length > 0 && !@user_id.nil?
        @valid = false unless @user_email =~ /\A[\w+\-.]+@[a-z\d\-]+(\.[a-z\d\-]+)*\.[a-z]+\z/i

        return unless @valid

        Nimzo::Terminal::output("\x1B[38;5;150m#{@user_id}\x1B[0m[\x1B[38;5;199m#{@user_score}\x1B[0m] \xe2\x86\x92 \x1B[38;5;173m#{@user_email}\x1B[0m", Nimzo::Terminal::MSG_AUTOMATIC)

        @connection.query("
            INSERT INTO crawler_ebay_users (
                user_id,
                user_score,
                user_feedback,
                user_email,
                user_phone,
                user_name,
                user_address_1,
                user_address_2,
                user_address_3,
                user_address_4,
                user_address_5,
                user_url
            )  VALUES (
                '#{@user_id}',
                '#{@user_score}',
                '#{@user_feedback}',
                '#{@user_email}',
                '#{@user_phone}',
                '#{@user_name}',
                '#{@user_address_one}',
                '#{@user_address_two}',
                '#{@user_address_three}',
                '#{@user_address_four}',
                '#{@user_address_five}',
                '#{@user_url}'
            )"
        )

    rescue => e

        puts e if 1 == 2

    end

end


while true

    search_term = nil
    search_terms = @connection.query("SELECT term FROM crawler_ebay_terms WHERE searched = '0'")
    search_terms.each_hash do |row|
        search_term = row['term']
    end

    remaining = nil
    remainings = @connection.query("SELECT COUNT(id) FROM crawler_ebay_terms WHERE searched = '0'")
    remainings.each_hash do |row|
        remaining = row['COUNT(id)']
    end

    exit if search_term.nil?

    Nimzo::Terminal::info("Processing: \x1B[38;5;43m#{search_term}\x1B[0m", ["Remaining un-processed terms: \x1B[38;5;192m#{remaining}\x1B[0m"])

    begin

        links = []

        [1, 2, 3, 4, 5].each do |page_number|
            search_url = "http://www.ebay.co.uk/sch/i.html?_from=R40&_sacat=0&LH_BIN=1&_nkw=#{search_term.gsub('/\s+/', '+')}&_pgn=#{page_number.to_s}&_skc=200&rt=nc"
            puts search_url
            page = Nokogiri::HTML(open(WEBrick::HTTPUtils.escape(search_url)))
            page.css('a[class=vip]').each do |element|
                links << element.attribute('href').value
            end

        end
        links.uniq!

        Nimzo::Terminal::info("Found #{links.length} links...", links)

        links.each { |link| process_page(link) }

        @connection.query("UPDATE crawler_ebay_terms SET searched = '1' WHERE term = '#{search_term}'")

    rescue => e

        puts e.message

    end

end